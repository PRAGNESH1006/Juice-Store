"use client";
import { useState, useEffect } from "react";
import {
  Button,
  TextField,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
} from "@mui/material";
import supabase from "@/app/supabase/supabaseClient"; // Adjust the import path as needed

export default function UserProfile() {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [profilePhoto, setProfilePhoto] = useState(null);
  const [phoneNumber, setPhoneNumber] = useState("");
  const [email, setEmail] = useState("");
  const [newEmail, setNewEmail] = useState("");
  const [currentPassword, setCurrentPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [error, setError] = useState(null);
  const [openUpdateDialog, setOpenUpdateDialog] = useState(false);

  useEffect(() => {
    // Fetch user session and profile information
    const fetchSession = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      setUser(user);
      setEmail(user?.email || "");
      setPhoneNumber(user?.user_metadata?.phone || "");
      setProfilePhoto(
        user?.user_metadata?.avatar_url || "/default-profile.png"
      );
      setLoading(false);
    };
    fetchSession();
  }, []);

  // Handle profile photo change
  const handleProfilePhotoChange = async (event) => {
    const file = event.target.files[0];
    if (!file) {
      console.error("No file selected");
      return;
    }

    setLoading(true);
    try {
      // Upload the selected image to Supabase storage
      const { data, error: uploadError } = await supabase.storage
        .from("juice-images")
        .upload(`public/${file.name}`, file);

      if (uploadError) throw uploadError;

      // Get the public URL of the uploaded image
      const { data: publicData } = supabase.storage
        .from("juice-images")
        .getPublicUrl(`public/${file.name}`);

      setProfilePhoto(publicData.publicUrl);
    } catch (err) {
      console.error("An unexpected error occurred:", err);
      setError("An error occurred while updating the profile photo.");
    } finally {
      setLoading(false);
    }
  };

  // Open the update profile dialog
  const handleUpdateDialogOpen = () => setOpenUpdateDialog(true);

  // Close the update profile dialog
  const handleUpdateDialogClose = () => setOpenUpdateDialog(false);

  // Handle profile updates (photo, phone number, email, and password)
  const handleProfileUpdate = async () => {
    setLoading(true);
    try {
      // Update profile photo if changed
      if (profilePhoto) {
        // Handle photo upload logic if needed
      }

      // Update phone number if changed
      if (phoneNumber !== user?.user_metadata?.phone) {
        const { error: phoneError } = await supabase.auth.updateUser({
          user_metadata: { phone: phoneNumber },
        });
        if (phoneError) throw phoneError;
      }

      // Update email if changed
      if (newEmail !== user?.email) {
        const { error: emailError } = await supabase.auth.updateUser({
          email: newEmail,
        });
        if (emailError) throw emailError;
      }

      // Update password if provided
      if (newPassword) {
        const { error: passwordError } = await supabase.auth.updateUser({
          password: newPassword,
        });
        if (passwordError) throw passwordError;
      }

      alert("Profile updated successfully!");
      handleUpdateDialogClose();
    } catch (err) {
      console.error("Error updating profile:", err);
      setError("Failed to update profile.");
    } finally {
      setLoading(false);
    }
  };

  if (loading) return <div className="text-center mt-3">Loading...</div>;

  return (
    <div className="m-4">
      <div className="px-4 sm:px-0">
        <h3 className="text-center text-base font-semibold leading-7 text-gray-900">
          User Profile
        </h3>
        <p className="mt-1 max-w-2xl text-sm leading-6 text-gray-500">
          Personal details and application.
        </p>
      </div>
      <div className="mt-6 border-t border-gray-100">
        <dl className="divide-y divide-gray-100">
          <div className="px-4 py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
            <dt className="text-sm font-medium leading-6 text-gray-900">
              Profile Photo
            </dt>
            <dd className="mt-1 text-sm leading-6 text-gray-700 sm:col-span-2 sm:mt-0">
              <div className="flex items-center">
                <img
                  src={profilePhoto}
                  alt="Profile Photo"
                  className="h-24 w-24 rounded-full object-cover"
                />
                <input
                  type="file"
                  onChange={handleProfilePhotoChange}
                  disabled={loading}
                  className="ml-4"
                />
              </div>
            </dd>
          </div>
          <div className="px-4 py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
            <dt className="text-sm font-medium leading-6 text-gray-900">
              Full Name
            </dt>
            <dd className="mt-1 text-sm leading-6 text-gray-700 sm:col-span-2 sm:mt-0">
              {user?.user_metadata?.full_name || "N/A"}
            </dd>
          </div>
          <div className="px-4 py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
            <dt className="text-sm font-medium leading-6 text-gray-900">
              Email Address
            </dt>
            <dd className="mt-1 text-sm leading-6 text-gray-700 sm:col-span-2 sm:mt-0">
              {user?.email || "N/A"}
            </dd>
          </div>
          <div className="px-4 py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
            <dt className="text-sm font-medium leading-6 text-gray-900">
              Phone Number
            </dt>
            <dd className="mt-1 text-sm leading-6 text-gray-700 sm:col-span-2 sm:mt-0">
              {phoneNumber || "N/A"}
            </dd>
          </div>
          <div className="px-4 py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
            <dt className="text-sm font-medium leading-6 text-gray-900">
              Joined Date
            </dt>
            <dd className="mt-1 text-sm leading-6 text-gray-700 sm:col-span-2 sm:mt-0">
              {user?.created_at || "N/A"}
            </dd>
          </div>
          <div className="px-4 py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
            <dt className="text-sm font-medium leading-6 text-gray-900">
              About
            </dt>
            <dd className="mt-1 text-sm leading-6 text-gray-700 sm:col-span-2 sm:mt-0">
              {user?.user_metadata?.bio || "N/A"}
            </dd>
          </div>
        </dl>
      </div>

      <div className="text-center mt-6">
        <Button
          onClick={handleUpdateDialogOpen}
          variant="contained"
          color="primary"
        >
          Update Profile
        </Button>
      </div>

      {/* Update Profile Dialog */}
      <Dialog
        open={openUpdateDialog}
        onClose={handleUpdateDialogClose}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>Update Profile</DialogTitle>
        <DialogContent>
          {/* Profile Photo Update */}
          <div className="mb-4">
            <h5 className="text-base font-semibold leading-6 text-gray-900">
              Update Profile Photo
            </h5>
            <div className="flex items-center">
              <img
                src={profilePhoto}
                alt="Profile Photo"
                className="h-24 w-24 rounded-full object-cover"
              />
              <input
                type="file"
                onChange={handleProfilePhotoChange}
                disabled={loading}
                className="ml-4"
              />
            </div>
          </div>

          {/* Phone Number Update */}
          <div className="mb-4">
            <TextField
              label="Phone Number"
              fullWidth
              value={phoneNumber}
              onChange={(e) => setPhoneNumber(e.target.value)}
              disabled={loading}
              className="mt-2"
            />
          </div>

          {/* Email Update */}
          <div className="mb-4">
            <TextField
              label="New Email"
              fullWidth
              value={newEmail}
              onChange={(e) => setNewEmail(e.target.value)}
              disabled={loading}
              className="mt-2"
            />
          </div>

          {/* Password Update */}
          <div className="mb-4">
            <TextField
              label="Current Password"
              type="password"
              fullWidth
              value={currentPassword}
              onChange={(e) => setCurrentPassword(e.target.value)}
              disabled={loading}
              className="mt-2"
            />
            <TextField
              label="New Password"
              type="password"
              fullWidth
              value={newPassword}
              onChange={(e) => setNewPassword(e.target.value)}
              disabled={loading}
              className="mt-2"
            />
          </div>
        </DialogContent>
        <DialogActions>
          <Button
            onClick={handleProfileUpdate}
            variant="contained"
            color="primary"
            disabled={loading}
          >
            Update Profile
          </Button>
          <Button
            onClick={handleUpdateDialogClose}
            variant="outlined"
            color="default"
          >
            Cancel
          </Button>
        </DialogActions>
      </Dialog>
    </div>
  );
}
